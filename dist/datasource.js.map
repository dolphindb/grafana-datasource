{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","doRequest","method","then","res","results","key","queryRes","series","i","push","target","datapoints","points","refId","meta","tables","table","format","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","mapToTextValue","map","d","text","value","isObject","datasourceRequest","sql","rawSql","from","to","scopedVars","queries","Promise","resolve","reject","isUTC","_isUTC","year","PrefixInteger","month","date","hour","minute","second","millisecond","num","Array","join","slice"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport class GenericDatasource {\r\n\r\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n        this.type = instanceSettings.type;\r\n        this.url = instanceSettings.url;\r\n        this.name = instanceSettings.name;\r\n        this.q = $q;\r\n        this.backendSrv = backendSrv;\r\n        this.templateSrv = templateSrv;\r\n        this.withCredentials = instanceSettings.withCredentials;\r\n        this.headers = { 'Content-Type': 'application/json' };\r\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\r\n            this.headers['Authorization'] = instanceSettings.basicAuth;\r\n        }\r\n    }\r\n\r\n    query(options) {\r\n        var query = this.buildQueryParameters(options, this.templateSrv);\r\n        query.targets = query.targets.filter(t => !t.hide);\r\n\r\n        if (query.targets.length <= 0) {\r\n            return this.q.when({ data: [] });\r\n        }\r\n\r\n        if (this.templateSrv.getAdhocFilters) {\r\n            query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\r\n        } else {\r\n            query.adhocFilters = [];\r\n        }\r\n\r\n        return this.doRequest({\r\n            url: this.url,\r\n            data: query,\r\n            method: 'POST'\r\n        }).then(res => {\r\n            var data = [];\r\n\r\n            if (!res.data.results) {\r\n                return {\r\n                    data: data\r\n                };\r\n            }\r\n\r\n            for (var key in res.data.results) {\r\n                var queryRes = res.data.results[key];\r\n                if (queryRes.series) {\r\n                    for (var i = 0; i < queryRes.series.length; i++) {\r\n                        var series = queryRes.series[i];\r\n                        data.push({\r\n                            target: series.name,\r\n                            datapoints: series.points,\r\n                            refId: queryRes.refId,\r\n                            meta: queryRes.meta,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                if (queryRes.tables) {\r\n                    for (var i = 0;i < queryRes.tables.length; i++) {\r\n                        var table = queryRes.tables[i];\r\n                        table.format = 'table';\r\n                        table.refId = queryRes.refId;\r\n                        table.meta = queryRes.meta;\r\n                        data.push(table);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return {\r\n                data: data\r\n            };\r\n        });\r\n    }\r\n\r\n    testDatasource() {\r\n        return this.doRequest({\r\n            url: this.url,\r\n            method: 'POST',\r\n        }).then(response => {\r\n            if (response.status === 200) {\r\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\r\n            }\r\n        });\r\n    }\r\n\r\n    annotationQuery(options) {\r\n        var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\r\n        var annotationQuery = {\r\n            range: options.range,\r\n            annotation: {\r\n                name: options.annotation.name,\r\n                datasource: options.annotation.datasource,\r\n                enable: options.annotation.enable,\r\n                iconColor: options.annotation.iconColor,\r\n                query: query\r\n            },\r\n            rangeRaw: options.rangeRaw\r\n        };\r\n\r\n        return this.doRequest({\r\n            url: this.url + '/annotations',\r\n            method: 'POST',\r\n            data: annotationQuery\r\n        }).then(result => {\r\n            return result.data;\r\n        });\r\n    }\r\n\r\n    metricFindQuery(query) {\r\n        var interpolated = {\r\n            target: this.templateSrv.replace(query, null, 'regex')\r\n        };\r\n\r\n        return this.doRequest({\r\n            url: this.url + '/search',\r\n            data: interpolated,\r\n            method: 'POST',\r\n        }).then(this.mapToTextValue);\r\n    }\r\n\r\n    mapToTextValue(result) {\r\n        return _.map(result.data, (d, i) => {\r\n            if (d && d.text && d.value) {\r\n                return { text: d.text, value: d.value };\r\n            } else if (_.isObject(d)) {\r\n                return { text: d, value: i };\r\n            }\r\n            return { text: d, value: d };\r\n        });\r\n    }\r\n\r\n    doRequest(options) {\r\n        options.withCredentials = this.withCredentials;\r\n        options.headers = this.headers;\r\n\r\n        return this.backendSrv.datasourceRequest(options);\r\n    }\r\n   \r\n    buildQueryParameters(options, templateSrv) {\r\n        \r\n        var targets = _.map(options.targets, target => {\r\n            var sql = target.rawSql;\r\n            sql = sql.replace(\"$__timeFilter_UTC\", \"pair(\" + this.format(options.range.from,true) + \",\" + this.format(options.range.to,true) + \")\");\r\n            sql = sql.replace(\"$__timeFilter\", \"pair(\" + this.format(options.range.from,false) + \",\" + this.format(options.range.to,false) + \")\");\r\n            //support variables\r\n            sql = templateSrv.replace(sql, options.scopedVars);\r\n            return {\r\n                rawSql: sql,\r\n                refId: target.refId,\r\n                hide: target.hide,\r\n                format: target.format || 'time_series'\r\n            };\r\n        });\r\n\r\n        options.queries = targets;\r\n        options.targets = targets;\r\n        return options;\r\n    }\r\n\r\n    getTagKeys(options) {\r\n        return new Promise((resolve, reject) => {\r\n            this.doRequest({\r\n                url: this.url + '/tag-keys',\r\n                method: 'POST',\r\n                data: options\r\n            }).then(result => {\r\n                return resolve(result.data);\r\n            });\r\n        });\r\n    }\r\n\r\n    getTagValues(options) {\r\n        return new Promise((resolve, reject) => {\r\n            this.doRequest({\r\n                url: this.url + '/tag-values',\r\n                method: 'POST',\r\n                data: options\r\n            }).then(result => {\r\n                return resolve(result.data);\r\n            });\r\n        });\r\n    }\r\n\r\n    format(d, isUTC) {\r\n        d._isUTC = isUTC;\r\n        return d.year() + \".\" + this.PrefixInteger(d.month() + 1,2) + \".\" + this.PrefixInteger(d.date(),2) + \"T\" + this.PrefixInteger(d.hour(),2) + \":\" + this.PrefixInteger(d.minute(),2) + \":\" + this.PrefixInteger(d.second(),2) + \".\" + this.PrefixInteger(d.millisecond(),3);\r\n    }\r\n\r\n    PrefixInteger(num, length) {  \r\n        return (Array(length).join('0') + num).slice(-length);  \r\n    }\r\n}\r\n"]}