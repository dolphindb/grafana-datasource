{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","doRequest","method","then","res","results","console","log","key","queryRes","series","i","push","target","datapoints","points","refId","meta","tables","table","format","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","mapToTextValue","map","d","text","value","isObject","datasourceRequest","quotedValues","val","join","rawSql","scopedVars","queries","Promise","resolve","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = { 'Content-Type': 'application/json' };\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n    }\n\n    query(options) {\n        var query = this.buildQueryParameters(options);\n        query.targets = query.targets.filter(t => !t.hide);\n\n        if (query.targets.length <= 0) {\n            return this.q.when({ data: [] });\n        }\n\n        if (this.templateSrv.getAdhocFilters) {\n            query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n        } else {\n            query.adhocFilters = [];\n        }\n\n        return this.doRequest({\n            url: this.url,\n            data: query,\n            method: 'POST'\n        }).then(res => {\n            var data = [];\n\n            if (!res.data.results) {\n                return {\n                    data: data\n                };\n            }\n            console.log(\"res\", res);\n            for (var key in res.data.results) {\n                var queryRes = res.data.results[key];\n                console.log(\"queryRes\", queryRes);\n                if (queryRes.series) {\n                    for (var i = 0; i < queryRes.series.length; i++) {\n                        console.log(\"queryRes.series\",queryRes.series[i]);\n                        var series = queryRes.series[i];\n                        data.push({\n                            target: series.name,\n                            datapoints: series.points,\n                            refId: queryRes.refId,\n                            meta: queryRes.meta,\n                        });\n                    }\n                }\n\n                if (queryRes.tables) {\n                    for (var table in queryRes.tables) {\n                        table.format = 'table';\n                        table.refId = queryRes.refId;\n                        table.meta = queryRes.meta;\n                        data.push(table);\n                    }\n                }\n            }\n\n            console.log(\"data\", data);\n            return {\n                data: data\n            };\n        });\n    }\n\n    testDatasource() {\n        return this.doRequest({\n            url: this.url + '/',\n            method: 'GET',\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n            }\n        });\n    }\n\n    annotationQuery(options) {\n        var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n        var annotationQuery = {\n            range: options.range,\n            annotation: {\n                name: options.annotation.name,\n                datasource: options.annotation.datasource,\n                enable: options.annotation.enable,\n                iconColor: options.annotation.iconColor,\n                query: query\n            },\n            rangeRaw: options.rangeRaw\n        };\n\n        return this.doRequest({\n            url: this.url + '/annotations',\n            method: 'POST',\n            data: annotationQuery\n        }).then(result => {\n            return result.data;\n        });\n    }\n\n    metricFindQuery(query) {\n        var interpolated = {\n            target: this.templateSrv.replace(query, null, 'regex')\n        };\n\n        return this.doRequest({\n            url: this.url + '/search',\n            data: interpolated,\n            method: 'POST',\n        }).then(this.mapToTextValue);\n    }\n\n    mapToTextValue(result) {\n        return _.map(result.data, (d, i) => {\n            if (d && d.text && d.value) {\n                return { text: d.text, value: d.value };\n            } else if (_.isObject(d)) {\n                return { text: d, value: i };\n            }\n            return { text: d, value: d };\n        });\n    }\n\n    doRequest(options) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n\n        return this.backendSrv.datasourceRequest(options);\n    }\n    interpolateVariable(value) {\r\n        if (typeof value === 'string') {\r\n            return '\\'' + value + '\\'';\r\n        }\r\n\r\n        var quotedValues = _.map(value, function (val) {\r\n            return '\\'' + val + '\\'';\r\n        });\r\n        return quotedValues.join(',');\r\n    }\n    buildQueryParameters(options) {\n        //remove placeholder targets\n        //options.targets = _.filter(options.targets, target => {\n        //  return target.target !== 'select metric';\n        //});\n\n        var targets = _.map(options.targets, target => {\n            return {\n                rawSql: this.templateSrv.replace(target.rawSql, options.scopedVars, 'regex'),\n                //target: this.templateSrv.replace(target.rawSql, options.scopedVars, 'regex'),\n                refId: target.refId,\n                hide: target.hide,\n                format: target.format || 'time_series'\n            };\n        });\n\n        options.queries = targets;\n\n        return options;\n    }\n\n    getTagKeys(options) {\n        return new Promise((resolve, reject) => {\n            this.doRequest({\n                url: this.url + '/tag-keys',\n                method: 'POST',\n                data: options\n            }).then(result => {\n                return resolve(result.data);\n            });\n        });\n    }\n\n    getTagValues(options) {\n        return new Promise((resolve, reject) => {\n            this.doRequest({\n                url: this.url + '/tag-values',\n                method: 'POST',\n                data: options\n            }).then(result => {\n                return resolve(result.data);\n            });\n        });\n    }\n\n}\n"]}